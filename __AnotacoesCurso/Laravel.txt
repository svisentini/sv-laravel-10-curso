
Comandos para o GIT nao ficar pedindo usuario e senha toda vez:
	git config --global credential.helper store
	git config --global credential.helper cache


Playlist
https://www.youtube.com/watch?v=AN-LZuw2GIc&list=PLVSNL1PHDWvQ1N6fqhQ5HQzFtN-xrkjNU


----------------------------------------------

#01 - Ecossistema Laravel
Varias ferramentas
	autenticação, email, deploy, seguranca
Documentação (https://laravel.com/docs/10.x)

#02 - Instalação
https://github.com/especializati/setup-docker-laravel/tree/laravel-10-com-php-8.1
Instalar docker-compose
	sudo apt install docker-compose
Utilizando docker
git clone -b laravel-10-com-php-8.1 https://github.com/especializati/setup-docker-laravel.git <nome_aplicação>
cd <nome_aplicacao>
docker-compose up -d
Rodar um bash dentro do container da aplicação
	docker-compose exec app bash
	Instalar as dependencias do laravel
		composer install
	Gerar a KEY do nosso projeto
		php artisan key:generate
Para acessar a aplicação >> http://localhost:8989/   (Porta que esta configurada no docker-compose.yml  nginx)
Remover os arquivos git do projeto (rm -rf .git)

#03 - Versionar o projeto no GIT
Iniciar o repositorio no GIT
	git init
	git add .
	git commit -m "First Commit"
	cria o repositorio no git e roda os comandos para subir as alterações

#04 - Entendendo a estrutura do framework

#05 - Ferramentas para trabalhar com Laravel
	Documentação >> https://laravel.com/docs/10.x
	Docker
	VSCode (Extensões)
		Laravel Blade Snippets
		PHP Intelephense
		Docker
		Docker Explorer

#06 - Primeiro Codigo com Laravel
	routes/web.php    >> rotas do sistema
	resources/views   >> paginas do sistema
	app/http/controller >> controlers

#07 - UI da Aplicação
	Dentro do container app >> docker-compose exec app bash
	Comando para criar um controller
	php artisan make:controller Admin\\SupportController
	Model >> Utilizado para recuperar informações do banco
	Configurações de conexao com o banco
	.env
	config/database.php

#08 - Migrations no Laravel 10
	database/migrations
	banco de dados : localhost porta : 3388
	criar uma migration
	dentro do container app >> docker-compose exec app bash
	php artisan migrate  >> Roda os arquivos de migrations >> Tabela migrations controla quais arquivos já rodaram na base.
	create database laravel; (caso nao exista o banco de dados criado)

#09 - Models no Laravel 10
	"Entidades" >> São os Models 
	Eloquent >> Abstrai os comandos de banco >> parecido com o jpa
	Model esta relacionado a uma tabela do banco
	Nome da classe no singular representa uma tabela com o mesmo nome, mas no plural, no banco de dados.
	ou
	definir dentro da classe >> protected $table = 'users';
	Para criar um model:
		php artisan make:model Support
		php artisan make:model Support -m      >> cria o model e o arquivo de migration
		php artisan make:model Support -mc     >> cria o model, o arquivo de migration e o controller
	php artisan migrate >> Para rodar os arquivos de migrations

#10 - Listagem dos dados com Blade
	Não usar <?php dentro de um arquivo blade.php (ERRADO !!!)
	Usar as diretivas, por exemplo "@foreach"

#11 - Formulários e Seguranca (CSRF)
	Cadastro de supports
	1 - rota
	2 - fazer a function create no controller
	3 - criação da view

	### OBS :
	Na view de criação, definir a propriedade "name" dos campos com o mesmo nome da coluna no banco
	Isso facilita no momento de criação, pois apenas um $request->all() já da certo e não precisa ficar
	mapeando o nome dos campos da página com o nome das colunas no banco 
	
#12 - Inserir Registro (e mass assignment)
	$request->body
	$request->get('body')
	$request->get('body','valor default')

	No Model, precisamos definir um array com as colunas que são permitidas (mass assignment)
	protected $fillable = ['subject','body','status'];

#13 - Exibir Detalhes do Registro
	A rota "supports/create" tem que vir antes da "supports/{id}" para o Laravel
	entender que "create" não é um "id".

	Existem várias formas de recuperar um registro:
	Support::find($id)  // Dessa forma, a busca é sempre pelo id da tabela
	Support::where('id', $id)->first()  // Faz um where e recupera o primeiro registro
	Support::where('id', '=', $id)->first()  // Faz um where com a condição "=" (que é default) e recupera o primeiro registro

#14 - Atualizar Registro
	Outra forma de atualizar o registro
	$support->subject = $request->subject;
	$support->body = $request->body;
	$support->save();
    
	@method('put')    >> No arquivo blade.php

#15 - Deletar Registro
	@csrf() 	>> Para enviar o token 
	@method('DELETE')  >> No arquivo blade.php 

#16 - Validações do jeito certo
	O mais correto é criar uma classe para as validações e não fazer no Controller.
	docker-compose exec app bash >> Abrir um bash dentro do container app
	php artisan make:request StoreUpdateSupport  >> Sera criado dentro de app/Http uma nova pasta chamada "Requests"
	Dentro de "rules" definimos as validações necessárias para os campos

	unique:supports >> Indica que o subject não pode se repetir dentro da tabela supports
	As validações podem ser separadas por "|" ou dentro de um array []
	No Controller, trocar o "Request" pela classe "StoreUpdateSupport" criada.















